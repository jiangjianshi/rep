<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans  
      http://www.springframework.org/schema/beans/spring-beans-4.1.xsd 
      http://www.springframework.org/schema/tx
 	  http://www.springframework.org/schema/tx/spring-tx-4.1.xsd 
 	  http://www.springframework.org/schema/aop 
 	  http://www.springframework.org/schema/aop/spring-aop-4.1.xsd
 	  http://www.springframework.org/schema/context  
      http://www.springframework.org/schema/context/spring-context.xsd  
">
	<!-- 开启controller注解支持 -->
	<context:component-scan base-package="com.css" />
	<bean id="propertyConfigure" class="com.css.utils.PropertyConfigurerSon">
		<property name="locations">
			<list>
				<value>classpath:config/jdbc.properties</value>
				<value>classpath:config/param.properties</value>
			</list>
		</property>
	</bean>
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource"
		destroy-method="close">
		<property name="driverClass" value="${hibernate.connection.driver_class}" />
		<property name="jdbcUrl" value="${hibernate.connection.url}" />
		<property name="user" value="${hibernate.connection.username}" />
		<property name="password" value="${hibernate.connection.password}" />

		<!-- 当连接池中的连接耗尽的时候c3p0一次同时获取的连接数。Default: 1 -->
		<property name="acquireIncrement" value="${acquireIncrement}" />
		<!-- 初始化时获取三个连接，取值应在minPoolSize与maxPoolSize之间。Default: 3 -->
		<property name="initialPoolSize" value="${initialPoolSize}">
		</property>

		<!-- 连接池中保留的最大连接数。Default: 15 -->
		<property name="maxPoolSize" value="${maxPoolSize}"></property>
		<!-- 连接池中保留的最小连接数。Default: 3 -->
		<property name="minPoolSize" value="${minPoolSize}"></property>

		<!-- 最大空闲时间,30秒内未使用则连接被丢弃。若为0则永不丢弃。Default: 0 -->
		<property name="maxIdleTime" value="${maxIdleTime}" />

		<!-- 两次连接中间隔时间，单位毫秒。Default: 1000 -->
		<property name="acquireRetryDelay" value="${acquireRetryDelay}"></property>
		<!-- 定义在从数据库获取新连接失败后重复尝试的次数。Default: 30 -->
		<property name="acquireRetryAttempts" value="${acquireRetryAttempts}"></property>
		<!-- 获取连接失败将会引起所有等待连接池来获取连接的线程抛出异常。但是数据源仍有效 保留，并在下次调用getConnection()的时候继续尝试获取连接。如果设为true，那么在尝试 
			获取连接失败后该数据源将申明已断开并永久关闭。Default: false -->
		<property name="breakAfterAcquireFailure" value="${breakAfterAcquireFailure}"></property>
		<!-- 闲置的连接测试周期 秒 -->
		<property name="idleConnectionTestPeriod" value="${idleConnectionTestPeriod}" />
	</bean>

	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<!-- 使用packagesToScan属性已批量定义了sessionFactory加载的实体对象 --> 
		<property name="packagesToScan">
			<list>
				<value>com.css.sysbase</value>
			</list>
		</property>
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">${hibernate.dialect}</prop>
				<!-- <prop key="hibernate.hbm2ddl.auto">true</prop> <prop key="hibernate.hbm2ddl.auto">update</prop> -->
				<prop key="hibernate.show_sql">true</prop>
				<prop key="hiberante.format_sql">true</prop>
			</props>
		</property>
	</bean>

	<!-- 定义事务管理器（声明式的事务） -->
	<bean id="transactionManager"
		class="org.springframework.orm.hibernate4.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory"></property>
	</bean>

	<!-- 声明式事务管理begin -->
	<aop:config>
		<aop:advisor pointcut="execution(* com.css.*.service.impl.*.*(..))"
			advice-ref="txAdvice" />
	</aop:config>

	 <!-- 使用声明式配置事物(事务通知) -->  
    <!--Spring中常用事务类型：  
         REQUIRED       支持当前事务，如果当前没有事务，就新建一个事务。这是最常见的选择。  
         SUPPORTS       支持当前事务，如果当前没有事务，就以非事务方式执行。  
         MANDATORY      支持当前事务，如果当前没有事务，就抛出异常。  
         REQUIRES_NEW   新建事务，如果当前存在事务，把当前事务挂起。  
         NOT_SUPPORTED  以非事务方式执行操作，如果当前存在事务，就把当前事务挂起。  
         NEVER          以非事务方式执行，如果当前存在事务，则抛出异常。      
     -->  
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="save*" propagation="REQUIRED" />
			<tx:method name="add*" propagation="REQUIRED" />
			<tx:method name="create*" propagation="REQUIRED" />
			<tx:method name="insert*" propagation="REQUIRED" />
			<tx:method name="update*" propagation="REQUIRED" />
			<tx:method name="merge*" propagation="REQUIRED" />
			<tx:method name="del*" propagation="REQUIRED" />
			<tx:method name="remove*" propagation="REQUIRED" />
			<tx:method name="put*" propagation="REQUIRED" />
			<tx:method name="use*" propagation="REQUIRED" />
			<!--hibernate4必须配置为开启事务 否则 getCurrentSession()获取不到 -->
			<tx:method name="get*" propagation="REQUIRED" read-only="true" />
			<tx:method name="count*" propagation="REQUIRED" read-only="true" />
			<tx:method name="find*" propagation="REQUIRED" read-only="true" />
			<tx:method name="list*" propagation="REQUIRED" read-only="true" />
			<tx:method name="*" read-only="true" rollback-for="Exception" />
		</tx:attributes>
	</tx:advice>
	<!-- 声明式事务管理end -->

	<!-- 对标注@Transaction注解的Bean或方法进行事务管理 -->
	<!-- 注解事务说明：http://www.cnblogs.com/younggun/archive/2013/07/16/3193800.html -->
	<tx:annotation-driven transaction-manager="transactionManager"
		proxy-target-class="true" />
</beans>
